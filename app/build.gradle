apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'android-apt'
android {

    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.mmt.shubh.expensemanager"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        // Enabling multidex support.
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    /*productFlavors {
        development {
            applicationId "com.mmt.shubh.expensemanager.dev"
            resValue "string", "app_name", "Expense Manager Debug"
        }
        production {
            resValue "string", "app_name", "Expense Manager"
        }
    }
*/
    signingConfigs {
        release
    }
    buildTypes {
        debug {
            zipAlignEnabled true
            resValue "string", "app_name", "Expense Manager Debug"
        }

        release {
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
            resValue "string", "app_name", "Expense Manager"
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def flavor = "default";
                /* if (variant.productFlavors.size() > 0)
                     flavor = variant.productFlavors.get(0);*/

                // def initials = "DefaultFlavor";
                /*if (flavor.name == "development")
                    initials = "dev";
                else if (flavor.name == "production")
                    initials = "prod";*/

                def build = "Debug";
                if (variant.buildType.name == "release")
                    build = "Release"
                def finalName = "ExpenseManager_" + build /*+ "_" + initials + "_" + variant.versionCode*/ + ".apk";
                output.outputFile = new File(output.outputFile.parent, finalName)
            }
        }
    }
    repositories {
        mavenCentral()
        maven {
            url "https://clojars.org/repo/"
        }
        maven {
            url 'http://dl.bintray.com/amulyakhare/maven'
        }
        maven { url "https://jitpack.io" }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    /*  afterEvaluate {
          processDebugGoogleServices.dependsOn switchToDebug
          processReleaseGoogleServices.dependsOn switchToRelease
      }*/


}

def Properties props = new Properties()
def propFile = new File('signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
def appModuleRootFolder = '.'
def srcDir = 'src'
def googleServicesJson = 'google-services.json'

task switchToDebug(type: Copy) {
    def buildType = 'debug'
    description = 'Switches to DEBUG google-services.json'
    from "${srcDir}/${buildType}"
    include "$googleServicesJson"
    into "$appModuleRootFolder"
}

task switchToRelease(type: Copy) {
    def buildType = 'production'
    description = 'Switches to RELEASE google-services.json'
    from "${srcDir}/${buildType}/"
    include "$googleServicesJson"
    into "$appModuleRootFolder"
}


dependencies {

    /*Android support libs*/
    compile 'com.android.support:support-v4:23.1.1'

    compile 'com.android.support:cardview-v7:23.1.1'
    compile 'com.android.support:multidex:1.0.1'

    /*play service dependency*/
    compile 'com.google.android.gms:play-services-analytics:8.3.0'
    compile 'com.google.android.gms:play-services-gcm:8.3.0'
    compile 'com.google.android.gms:play-services-auth:8.3.0'

    /*Facebook*/
    compile 'com.facebook.android:facebook-android-sdk:4.0.0'

    /*Network dependency*/
    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.github.bumptech.glide:glide:3.5.2'
    compile 'com.github.bumptech.glide:okhttp-integration:1.3.0'

    /*Ui dependency*/
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'de.hdodenhof:circleimageview:1.3.0'
    compile 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    compile 'com.github.PhilJay:MPAndroidChart:v2.1.3'

    /* Dependency Injection*/
    compile 'com.google.dagger:dagger:2.0.1'
    apt 'com.google.dagger:dagger-compiler:2.0.1'
    provided 'org.glassfish:javax.annotation:10.0-b28'

    /*Utility dependency*/
    provided 'frankiesardo:icepick-processor:3.1.0'
    apt "org.parceler:parceler:1.0.3"

    compile 'frankiesardo:icepick:3.1.0'
    compile 'org.parceler:parceler-api:1.0.3'

    compile 'com.facebook.stetho:stetho:1.2.0'
    compile 'com.facebook.stetho:stetho-okhttp:1.2.0'

    /*Reactive programming*/
    compile 'io.reactivex:rxandroid:1.0.1'
    compile 'io.reactivex:rxjava:1.0.15'

    /*Json parsing */
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.squareup.retrofit:converter-gson:2.0.0-SNAPSHOT'

    /*Logging*/
    compile 'com.jakewharton.timber:timber:4.1.0'

    compile project(':mmtframework')

    /*Data base */
    compile 'com.squareup.sqlbrite:sqlbrite:0.6.0'

    compile 'net.danlew:android.joda:2.9.2'
}

retrolambda {
    javaVersion JavaVersion.VERSION_1_7
}
